

-- PERFORMANCE ANALYSIS (EDA)
-------------------------------
/*
=========================================================================================================
Analyze the yearly performance of products by comparing their sales to both the average sales performance 
  of the product and the previous year's sales
==========================================================================================================
  */
------------------------------------------------------------------------------------------------------------------


WITH yearly_products_sales AS(
SELECT
	YEAR(f.order_date) AS order_year,
	p.product_name,
	SUM(f.sales_amount) AS current_sales
FROM gold.fact_sale AS f
LEFT JOIN gold.dim_products AS p 
ON f.product_key = p.product_key
WHERE f.order_date IS NOT NULL
GROUP BY YEAR(f.order_date),
			p.product_name)

SELECT 
	order_year,
	product_name,
	current_sales,
	AVG(current_sales)  OVER(PARTITION BY product_name) AS avg_sale,
	current_sales - AVG(current_sales)  OVER(PARTITION BY product_name) AS average_diff,
	CASE WHEN current_sales - AVG(current_sales)  OVER(PARTITION BY product_name)  < 0 THEN 'below average'
		 WHEN current_sales - AVG(current_sales)  OVER(PARTITION BY product_name)  > 0 THEN 'above average'
		 ELSE 'average'
	END AS average_change,
	-- YEAR OVER YEAR ANALYSIS 
	LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) AS previous_year_sale,
	current_sales - LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) AS diff_previous_year,
	CASE WHEN current_sales - LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) > 0 THEN 'increasing'
		 WHEN current_sales - LAG(current_sales) OVER(PARTITION BY product_name ORDER BY order_year) < 0 THEN 'decreasing'
		 ELSE 'no change'
	END AS previous_year_change 
FROM yearly_products_sales
ORDER BY product_name, order_year;


-- PART TO WHOLE ANALYSIS
-------------------------------
WITH category_sales AS (
	SELECT
	pd.category,
	SUM(fa.sales_amount) AS total_sales
FROM gold.fact_sale AS fa
LEFT JOIN  gold.dim_products AS pd
ON fa.product_key = pd.product_key
GROUP BY pd.category)

SELECT 
	category,
	total_sales,
	SUM(total_sales) OVER() AS overall_sales,
	CONCAT(ROUND((CAST(total_sales AS FLOAT) / SUM(total_sales) OVER()) * 100, 2), '%') AS percent_to_whole
FROM category_sales
ORDER BY total_sales DESC;


-- FINDING THE TREND OF METRICS OVER TIME 

SELECT 
	FORMAT(order_date, 'MMM-yyyy') AS order_year_month,
	SUM(sales_amount) AS total_revenue,
	SUM(quantity) AS total_items_sold,
	COUNT(order_number) AS total_Nr_order
FROM gold.fact_sale
WHERE order_date IS NOT NULL
GROUP BY FORMAT(order_date, 'MMM-yyyy') 
ORDER BY FORMAT(order_date, 'MMM-yyyy') ;


SELECT 
	DATETRUNC(MONTH, order_date) AS order_year_month,
	SUM(sales_amount) AS total_revenue,
	SUM(quantity) AS total_items_sold,
	COUNT(order_number) AS total_Nr_order
FROM gold.fact_sale
GROUP BY DATETRUNC(MONTH, order_date)
ORDER BY DATETRUNC(MONTH, order_date) DESC;

-- CUMULATIVE ANALYSIS 

SELECT
	order_date,
	total_sales,
	SUM(total_sales) OVER(ORDER BY order_date) AS running_total_sales
FROM(
SELECT
DATETRUNC(MONTH, order_date) AS order_date,
SUM(sales_amount) AS total_sales
FROM gold.fact_sale
WHERE order_date IS NOT NULL
GROUP BY DATETRUNC(MONTH, order_date)
)t;


SELECT
	order_date,
	total_sales,
	SUM(total_sales) OVER(ORDER BY order_date) AS running_total_sales,
	average_price,
	AVG(average_price) OVER(ORDER BY order_date) AS moving_average
FROM(
SELECT
YEAR(order_date) AS order_date,
SUM(sales_amount) AS total_sales,
AVG(price) AS average_price
FROM gold.fact_sale
WHERE order_date IS NOT NULL
GROUP BY YEAR(order_date)
)t;
